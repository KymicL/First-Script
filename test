getgenv().autoClick = false
getgenv().autoRebirth = false
getgenv().autoUpgrade = false
getgenv().autoCollectDaliy = false
getgenv().autoCollectRewards = false
getgenv().autoOpen = false

local remotePath = game:GetService("ReplicatedStorage").PlayerClick
local remotePath = game:GetService("ReplicatedStorage").PlayerRebirth
local remotePath = game:GetService("ReplicatedStorage").IngameStoreBuyProductMax
local remotePath = game:GetService("ReplicatedStorage").RepeatableRewards_TimeUntilAvailable
local remotePath = game:GetService("ReplicatedStorage").CollectTimedReward
local remotePath = game:GetService("ReplicatedStorage").PetStoreRoll







 











function doclick()
     spawn(function()
          while getgenv().autoClick == true do
              local args = {[1] = false}
              remotePath:FireServer(unpack(args))
              wait()
          end
     end)
end






function autoRebirth(rebirthAmount)
     spawn(function()
          while getgenv().autoRebirth == true do
               local args = {[1] = rebirthAmount}
               remotePath:FireServer(unpack(args))
               wait()
          end
     end)
end

autoRebirth(1000)



function doUpgrades(Upgrades)
     spawn(function()
          while wait() do
          if not getgenv().autoUpgrades then break end
               local args = {[1] = "Upgrades",[2] = "UpgradeAutoClick"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UnlockTeleport"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeJump"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UnlockAutoTap"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeSecretPet"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeRebirthValue"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UnlockMultiDelete"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UnlockAutoBuy"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeGemValue"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeSplosionCount"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeRarityIncreaseChance"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeSplosionCD"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeInventory"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeRebirth"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradePetSpeed"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeSpeed"}
               remotePath:InvokeServer(unpack(args))

               local args = {[1] = "Upgrades",[2] = "UpgradeRebirthTaps"}
               remotePath:InvokeServer(unpack(args))
          end
     end)
end



doUpgrades()






function autoCollectDaily()
     spawn(function()
          while wait() do
          if not getgenv().autoCollectDaliy then break end
               local args = {[1] = "DailyTapBoost"}
               remotePath:InvokeServer(unpack(args))
          end  
     end)
end




function autoCollectRewards()
     spawn(function ()
               while wait() do
               if not getgenv().autoCollectRewards then break end
               local args = {[1] = "TapsReward"}
               remotePath:InvokeServer(unpack(args))
               local args = {[1] = "GemsReward"}
               remotePath:InvokeServer(unpack(args))
               local args = {[1] = "SRTokenReward"}
               remotePath:InvokeServer(unpack(args))
          end
     end)
end







function autoOpen(shopType)
     spawn(function()
         while wait() do
         if not getgenv().autoOpen == true or iteration then break end
               local args = {[1] = "StandardShop",[2] = 1}
               remotePath:InvokeServer(unpack(args))
         end
     end)
end

function getCurrentPlayerPOS()
     local plyr = game.Players.LocalPlayer
     if plyr.Character then
          return plyr.Character.HumannoidRootPart.Position
     end
     return false
end

local currnentPosition = getCurrentPlaterPOS()
if currnentPosition then
end



function teleportTO(placeCFrame)
     local plyr = game.Players.LocalPlayer
     if plyr.Character then
         plyr.Character.HumanoidRootPart.CFrame = placeCFrame
     end
 end
 function teleportWorld(world)
     if game:GetService("Workspace").Worlds:FindFirstChild(world)then
         teleportTO(game:GetService("Workspace").TapShop.Hoop.CFrame)
     end
end

teleportWorld('TapShop')








local w = library:CreateWindow("TAPPING SIMULATOR") -- Creates the window

local a = w:CreateFolder("Farming")

local b = w:CreateFolder("Pets") -- Creates the folder(U will put here your buttons,etc)

local c = w:CreateFolder("Upgrades")

local d = w:CreateFolder("Teleports")

local e = w:CreateFolder("Misc")




a:Toggle("Auto Click",function(bool)
    getgenv().autoClick = bool
    if bool then
          doTap()
    end
end)


a:Toggle("Auto Rebirth",function(bool)
     getgenv().autoRebirth = bool
     if bool then
          autoRebirth(1000)
     end
 end)



 b:Toggle("Standard",function(bool)
     getgenv().autoOpen = bool
     if bool then
          autoOpen(1000)
     end
 end)


 c:Toggle("Upgarde",function(bool)
        getgenv().autoUpgrades =bool
           local args = {[1] = "Upgrades",[2] = "UpgradeAutoClick"}
        remotePath:InvokeServer(unpack(args))
      if bool then
          doUpgrades()
      end
     end)
 c:Button("Upgrades",function()
     doUpgrades()
     while wait() do
     if not getgenv().autoUpgrades then break end
               local args = {[1] = "Upgrades",[2] = "UpgradeAutoClick"}
               remotePath:InvokeServer(unpack(args))
     end
 end)





 d:Button("Coming Soon",function()
     print("")
 end)
 


 
e:DestroyGui()

--[[
How to refresh a dropdown:
1)Create the dropdown and save it in a variable
local yourvariable = b:Dropdown("Hi",yourtable,function(a)
    print(a)
end)
2)Refresh it using the function
yourvariable:Refresh(yourtable)
How to refresh a label:
1)Create your label and save it in a variable
local yourvariable = b:Label("Pretty Useless NGL",{
    TextSize = 25; -- Self Explaining
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})
2)Refresh it using the function
yourvariable:Refresh("Hello") It will only change the text ofc
]]












local currnentPosition = getCurrentPlaterPOS()
if currnentPosition then
end





game.player.LocalPlayer.Character.Head.NameTag.Frame.Visible = false; -- remove name tag



for i, v in pairs(getgenv())do

end

function teleportTO(placeCFrame)
     local plyr = game.Players.LocalPlayer
     if plyr.Character then
         plyr.Character.HumanoidRootPart.CFrame = placeCFrame
     end
 end


















-- b:Label("Pretty Useless NGL",{
--      TextSize = 25; -- Self Explaining
--      TextColor = Color3.fromRGB(255,255,255); -- Self Explaining
--      BgColor = Color3.fromRGB(69,69,69); -- Self Explaining

--  })





--  b:Button("Button",function()
--      print("Elym Winning")
--  end)
 



--  b:Button("Button",function()
--      print("Elym Winning")
--  end)
 


     





-- b:Slider("Slider",{
--     min = 10; -- min value of the slider
--     max = 50; -- max value of the slider
--     precise = true; -- max 2 decimals
-- },function(value)
--     print(value)
-- end)

-- b:Dropdown("Dropdown",{"A","B","C"},true,function(mob) --true/false, replaces the current title "Dropdown" with the option that t
--     print(mob)
-- end)

-- b:Bind("Bind",Enum.KeyCode.C,function() --Default bind
--     print("Yes")
-- end)

-- b:ColorPicker("ColorPicker",Color3.fromRGB(255,0,0),function(color) --Default color
--     print(color)
-- end)

-- b:Box("Box","number",function(value) -- "number" or "string"
--     print(value)
-- end)








